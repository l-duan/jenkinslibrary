#!groovy

@Library('jenkinslibrary@master') _

//func from shareibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def nexus = new org.devops.nexus()
def artifactory = new org.devops.artifactory() 


//def runOpts
//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"
String artifactUrl = "${env.artifactUrl}"
String userEmail = "duanlian@hrgame.com.cn"

//pipeline
pipeline{
    agent { node { label "master"}}
    
    stages{

        stage("Prepare"){
            steps{
                script{
                    httpRequest httpMode: 'POST', requestBody: '{"key":"cHAyaG10"}', responseHandle: 'NONE', url: 'http://49.233.222.216:2376/v3/kv/range'
                    tools.PrintMes("更新配置文件","green")
                }
            }
        }

        stage("CheckOut"){
            steps{
                script{
                    
                    tools.PrintMes("拉取代码","green")

                }
            }
        }

        stage("Build"){
            steps{
                script{
                
                    tools.PrintMes("编译gamesvrd成功","green")

                }
            }
       }
          
        stage("QA"){
            steps {
                script{             
                    tools.PrintMes("gamesvrd版本校验","green")
                    //sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                    
                    //sleep 30
                    tools.PrintMes("获取校验结果","green")
                    //result = sonarapi.GetProjectStatus("${JOB_NAME}")
                    
                }
           }
       }

       stage("DeployClientResource"){
            steps{
                script{
                
                    tools.PrintMes("部署客户端资源成功！！","green")

                }
            }
       }
        
        stage("DeployServerResource"){
            steps{
                script{
                
                    tools.PrintMes("部署服务端资源成功！！","green")

                }
            }
       }
    }


    post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
               // println("success")
               // if ("${runOpts}" == "GitlabPush"){
               //     gitlab.ChangeCommitStatus(projectId,commitSha,"success")
               // }
                tools.PrintMes("流水线成功","green")
            
            }
        
        }
        failure{
            script{
                //tools.PrintMes("failure","red")
                tools.PrintMes("流水线失败了！","red")
            }
        }
        
        aborted{
            script{
               //tools.PrintMes("aborted","red")
               tools.PrintMes("流水线被取消了！！","red")
            }
        
        }
    
    }    
   
}
